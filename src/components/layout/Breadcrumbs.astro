---
interface BreadcrumbItem {
  label: string;
  href: string;
}

interface Props {
  items?: BreadcrumbItem[];
  labels?: Record<string, string>;
}

const { items, labels = {} } = Astro.props;
const currentPath = Astro.url.pathname;

// Function to convert URL slug to readable label
const slugToLabel = (slug: string): string => {
  return slug
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
};

// Auto-generate breadcrumbs from URL if items not provided
let breadcrumbs: BreadcrumbItem[] = [];

if (items && items.length > 0) {
  // Use provided items
  breadcrumbs = [
    { label: 'Home', href: '/' },
    ...items
  ];
} else if (currentPath !== '/') {
  // Auto-generate from URL
  const segments = currentPath.split('/').filter(Boolean);
  breadcrumbs = [{ label: 'Home', href: '/' }];
  
  let path = '';
  segments.forEach((segment, index) => {
    path += `/${segment}`;
    const label = labels[segment] || slugToLabel(segment);
    breadcrumbs.push({
      label,
      href: path
    });
  });
} else {
  breadcrumbs = [{ label: 'Home', href: '/' }];
}

// Filter duplicates
const uniqueBreadcrumbs = breadcrumbs.filter((item, index, self) => 
  index === self.findIndex(t => t.href === item.href)
);

// Find current page based on pathname
const isCurrentPage = (href: string) => {
  return currentPath === href || (href !== '/' && currentPath.startsWith(href + '/'));
};
---

{currentPath !== '/' && (
  <section class="bg-slate-100 py-2">
    <div class="max-w-7xl mx-auto px-6">
      <nav class="flex items-center justify-center" aria-label="Breadcrumb">
        <ol class="flex items-center gap-2 font-light text-sm">
          {uniqueBreadcrumbs.map((item, index) => {
            const isCurrent = isCurrentPage(item.href);
            return (
              <li class="flex items-center gap-2">
                {isCurrent ? (
                  <span class="text-[#069c4b] font-medium">{item.label}</span>
                ) : (
                  <a href={item.href} class="text-gray-600 hover:text-gray-900 transition">
                    {item.label}
                  </a>
                )}
                {index < uniqueBreadcrumbs.length - 1 && (
                  <span class="text-gray-400">/</span>
                )}
              </li>
            );
          })}
        </ol>
      </nav>
    </div>
  </section>
)}